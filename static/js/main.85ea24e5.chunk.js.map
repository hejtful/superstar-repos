{"version":3,"sources":["features/github/components/StarredFilter.module.css","features/github/components/LanguageFilter.module.css","app/middleware/localStorageMiddleware.ts","features/github/githubSlice.ts","features/github/util.ts","features/github/constants.ts","features/github/githubApi.ts","app/store.ts","app/hooks.ts","app/util.ts","features/github/components/LanguageFilter.tsx","features/github/components/StarredFilter.tsx","features/github/components/RepoListItem.tsx","features/github/Github.tsx","App.tsx","serviceWorker.ts","index.tsx","features/github/Github.module.css","features/github/components/RepoListItem.module.css"],"names":["module","exports","APPLICATION_STATE_KEY","localStorageMiddleware","getState","next","action","result","localStorage","setItem","JSON","stringify","githubSlice","createSlice","name","initialState","starred","reducers","starRepo","state","push","payload","unStarRepo","filter","id","actions","selectStarredReposIds","github","buildGitHubApiQueryParam","params","Object","keys","reduce","queryString","currentParamKey","currentParamValue","concat","languages","githubApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getRepos","query","url","q","sort","order","page","per_page","transformResponse","response","items","useGetReposQuery","rootReducer","combineReducers","githubReducer","reducer","useAppSelector","useSelector","getNDaysAgoDateString","anchorDate","daysAgo","date","year","getFullYear","month","getMonth","slice","day","getDate","getFormattedDateString","Date","LanguageFilter","onChange","htmlFor","className","styles","label","select","map","language","value","StarredFilter","switch","labelText","type","input","checked","slider","RepoListItem","repo","isStarred","onStarButtonClick","onUnStarButtonClick","wrapper","titleWrapper","title","href","html_url","link","owner","login","repoName","button","onClick","description","details","stargazers_count","created","daysToLastSunday","getDay","daysToLastMonday","lastSunday","lastMonday","getLastWeekQueryString","Github","useState","setLanguage","isStarredFilterActive","setIsStarredFilterActive","allRepos","data","error","isLoading","starredReposIds","dispatch","useDispatch","repos","includes","main","banner","bannerTitle","bannerDescription","container","event","target","statusMessage","length","App","Boolean","window","location","hostname","match","preloadedState","store","persistedState","getItem","parse","hydrateStore","configureStore","middleware","getDefaultMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,OAAS,8BAA8B,UAAY,iCAAiC,MAAQ,6BAA6B,OAAS,gC,mBCApJD,EAAOC,QAAU,CAAC,MAAQ,8BAA8B,OAAS,iC,sICCpDC,EAAwB,mBAExBC,EACX,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACA,SAACC,GAAD,OACA,SAACC,GACC,IAAMC,EAASF,EAAKC,GAIpB,OAFAE,aAAaC,QAAQP,EAAuBQ,KAAKC,UAAUP,MAEpDG,KCDEK,EAAcC,YAAY,CACrCC,KAAM,SACNC,aANgC,CAChCC,QAAS,IAMTC,SAAU,CACRC,SAAU,SAACC,EAAOb,GAChBa,EAAMH,QAAQI,KAAKd,EAAOe,UAG5BC,WAAY,SAACH,EAAOb,GAClBa,EAAMH,QAAUG,EAAMH,QAAQO,QAAO,SAACC,GAAD,OAAQA,IAAOlB,EAAOe,eAK1D,EAAiCT,EAAYa,QAArCP,EAAR,EAAQA,SAAUI,EAAlB,EAAkBA,WAEZI,EAAwB,SAACP,GAAD,OAAsBA,EAAMQ,OAAOX,SAEzDJ,IAAf,Q,eC7BagB,EAA2B,SAAIC,GAG1C,OAFkBC,OAAOC,KAAKF,GAEbG,QAAO,SAACC,EAAaC,GACpC,IAAMC,EAAoBN,EAAOK,GAEjC,OAAKC,EAEEF,EAAYG,OAAZ,UAAsBF,EAAtB,aAA0CC,EAA1C,MAFwBF,IAG9B,KCPQI,EAAY,CACvB,aACA,SACA,OACA,MACA,MACA,IACA,KACA,OACA,QACA,UACA,QACA,MACA,OACA,UCVWC,EAAYC,YAAU,CACjCC,YAAa,YACbC,UAAWC,YAAe,CAAEC,QAAS,4BACrCC,UAAW,SAACC,GAAD,MAAc,CACvBC,SAAUD,EAAQE,MAAkC,CAClDA,MAAO,SAAClB,GAAD,MAAa,CAClBmB,IAAI,sBACJnB,OAAQ,CACNoB,EAAGrB,EAAuCC,GAC1CqB,KAAK,QACLC,MAAM,OACNC,KAAM,EACNC,SDlBsB,MCqB1BC,kBAAmB,SAACC,GAAD,OAAgCA,EAASC,aAKnDC,EAAqBnB,EAArBmB,iBCnBTC,EAAcC,YAAgB,aAClChC,OAAQiC,GACPtB,EAAUE,YAAcF,EAAUuB,U,QCJxBC,EAAkDC,ICGlDC,EAAwB,SAACC,EAAkBC,GAMtD,OAdoC,SAACC,GACrC,IAAMC,EAAOD,EAAKE,cACZC,GAAS,KAAOH,EAAKI,WAAa,IAAIC,OAAO,GAC7CC,GAAO,IAAMN,EAAKO,WAAWF,OAAO,GAE1C,MAAM,GAAN,OAAUJ,EAAV,YAAkBE,EAAlB,YAA2BG,GASpBE,CALM,IAAIC,KACfX,EAAWI,cACXJ,EAAWM,WACXN,EAAWS,UAAYR,K,wBCFpB,SAASW,EAAT,GAA8C,IAApBC,EAAmB,EAAnBA,SAC/B,OACE,wBAAOC,QAAQ,kBAAkBC,UAAWC,IAAOC,MAAnD,sBAEE,yBACE1D,GAAG,kBACHwD,UAAWC,IAAOE,OAClBL,SAAUA,EACV,cAAY,kBAJd,UAME,yCACCzC,EAAU+C,KAAI,SAACC,GAAD,OACb,wBAAQC,MAAOD,EAAf,SACGA,GAD2BA,Y,qBCbjC,SAASE,EAAT,GAAoD,IAA3BD,EAA0B,EAA1BA,MAAOR,EAAmB,EAAnBA,SACrC,OACE,wBAAOE,UAAWC,IAAOO,OAAQ,cAAY,iBAA7C,UACE,sBAAMR,UAAWC,IAAOQ,UAAxB,sBACA,uBACEC,KAAK,WACLV,UAAWC,IAAOU,MAClBC,QAASN,EACTR,SAAUA,IAEZ,sBAAME,UAAWC,IAAOY,Y,oBCRvB,SAASC,EAAT,GAKI,IAJTC,EAIQ,EAJRA,KACAC,EAGQ,EAHRA,UACAC,EAEQ,EAFRA,kBACAC,EACQ,EADRA,oBAEA,OACE,0BAASlB,UAAWC,IAAOkB,QAAS,cAAY,iBAAhD,UACE,sBAAKnB,UAAWC,IAAOmB,aAAvB,UACE,oBAAIpB,UAAWC,IAAOoB,MAAtB,SACE,oBAAGC,KAAMP,EAAKQ,SAAUvB,UAAWC,IAAOuB,KAA1C,UACGT,EAAKU,MAAMC,MADd,KAEE,uBAAM1B,UAAWC,IAAO0B,SAAxB,cAAoCZ,EAAKjF,aAI5CkF,EACC,wBACEhB,UAAWC,IAAO2B,OAClBlB,KAAK,SACLmB,QAASX,EACT,cAAY,iBAJd,qBASA,wBACElB,UAAWC,IAAO2B,OAClBlB,KAAK,SACLmB,QAASZ,EACT,cAAY,cAJd,qBAWJ,mBAAGjB,UAAWC,IAAO6B,YAArB,SAAmCf,EAAKe,cAExC,sBAAK9B,UAAWC,IAAO8B,QAAvB,UACE,8CAAiBhB,EAAKV,UAAY,aAClC,2CAAcU,EAAKiB,0B,oBCxCrBC,EJKgC,SAAChD,GACrC,IAAMiD,EAAmBjD,EAAWkD,SAC9BC,EAAmBF,EAAmB,EAEtCG,EAAarD,EAAsBC,EAAYiD,GAC/CI,EAAatD,EAAsBC,EAAYmD,GAErD,MAAM,GAAN,OAAUE,EAAV,aAAyBD,GIZXE,CADJ,IAAI3C,MAMT,SAAS4C,IACd,MAAgCC,mBAAwB,MAAxD,mBAAOpC,EAAP,KAAiBqC,EAAjB,KACA,EAA0DD,oBAAS,GAAnE,mBAAOE,EAAP,KAA8BC,EAA9B,KACA,EAIInE,EAAiB,CAAEwD,UAAS5B,aAHxBwC,EADR,EACEC,KACAC,EAFF,EAEEA,MACAC,EAHF,EAGEA,UAEIC,EAAkBnE,EAAepC,GACjCwG,ELtB4BC,cKwB5BC,EAAQT,EAAqB,OAC/BE,QAD+B,IAC/BA,OAD+B,EAC/BA,EAAUtG,QAAO,SAACwE,GAAD,cAAUkC,QAAV,IAAUA,OAAV,EAAUA,EAAiBI,SAAStC,EAAKvE,OAC1DqG,EAEJ,OACE,uBAAM7C,UAAWC,IAAOqD,KAAxB,UACE,sBAAKtD,UAAWC,IAAOsD,OAAvB,UACE,oBAAIvD,UAAWC,IAAOuD,YAAtB,6BACA,mBAAGxD,UAAWC,IAAOwD,kBAArB,qGAMF,qBAAKzD,UAAWC,IAAOyD,UAAvB,SACE,sBAAK1D,UAAWC,IAAOkB,QAAvB,UACE,sBAAKnB,UAAWC,IAAOxD,QAAvB,UACE,cAACoD,EAAD,CACEC,SAAU,SAAC6D,GAAD,OACRjB,EAAaiB,EAAMC,OAA6BtD,UAIpD,cAACC,EAAD,CACED,MAAOqC,EACP7C,SAAU,SAAC6D,GAAD,OACRf,EACGe,EAAMC,OAA4BhD,eAM3C,8BACGmC,EAEC,qBAAK/C,UAAWC,IAAO4D,cAAvB,SAlDc,iDAmDZb,EAEF,qBAAKhD,UAAWC,IAAO4D,cAAvB,SApDgB,gBAqDT,OAALT,QAAK,IAALA,OAAA,EAAAA,EAAOU,QAETV,EAAMhD,KAAI,SAACW,GAAD,OACR,cAACD,EAAD,CAEEC,KAAMA,EACNC,UAAS,OAAEiC,QAAF,IAAEA,OAAF,EAAEA,EAAiBI,SAAStC,EAAKvE,IAC1CyE,kBAAmB,kBAAMiC,EAAShH,EAAS6E,EAAKvE,MAChD0E,oBAAqB,kBAAMgC,EAAS5G,EAAWyE,EAAKvE,OAJ/CuE,EAAKvE,QAOJ,OAARqG,QAAQ,IAARA,OAAA,EAAAA,EAAUiB,QAEZ,sBACE9D,UAAWC,IAAO4D,cAClB,cAAY,2BAFd,6CRjFkB,GQiFlB,IAIsDxD,EAAU,IAJhE,YAOE,eClFD0D,MAJf,WACE,OAAO,cAACvB,EAAD,KCSWwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,ITE2BC,ESFrBC,GTEqBD,ELGC,WAC1B,IAAME,EAAiB/I,aAAagJ,QAAQtJ,GAE5C,GAAuB,OAAnBqJ,EACF,OAAO7I,KAAK+I,MAAMF,GcTGG,GTGhBC,YAAe,CACpB9F,QAASH,EACT2F,iBACAO,WAAY,SAACC,GAAD,OACVA,IACGzH,OAAOjC,GACPiC,OAAOE,EAAUsH,gBSP1BE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAC1C,GACN2C,QAAQ3C,MAAMA,EAAM4C,a,kBE7I5B3K,EAAOC,QAAU,CAAC,KAAO,qBAAqB,OAAS,uBAAuB,YAAc,4BAA4B,kBAAoB,kCAAkC,UAAY,0BAA0B,QAAU,wBAAwB,QAAU,wBAAwB,cAAgB,gC,kBCAxSD,EAAOC,QAAU,CAAC,QAAU,8BAA8B,aAAe,mCAAmC,MAAQ,4BAA4B,KAAO,2BAA2B,OAAS,6BAA6B,SAAW,+BAA+B,YAAc,kCAAkC,QAAU,iC","file":"static/js/main.85ea24e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch\":\"StarredFilter_switch__3L0qa\",\"labelText\":\"StarredFilter_labelText__3NGKI\",\"input\":\"StarredFilter_input__3c6JR\",\"slider\":\"StarredFilter_slider__2f9zj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"LanguageFilter_label__20gk2\",\"select\":\"LanguageFilter_select__2kTMx\"};","import { Middleware } from 'redux';\n\nexport const APPLICATION_STATE_KEY = 'applicationState';\n\nexport const localStorageMiddleware: Middleware =\n  ({ getState }) =>\n  (next) =>\n  (action) => {\n    const result = next(action);\n\n    localStorage.setItem(APPLICATION_STATE_KEY, JSON.stringify(getState()));\n\n    return result;\n  };\n\nexport const hydrateStore = () => {\n  const persistedState = localStorage.getItem(APPLICATION_STATE_KEY);\n\n  if (persistedState !== null) {\n    return JSON.parse(persistedState);\n  }\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface GithubState {\n  starred: number[];\n}\n\nconst initialState: GithubState = {\n  starred: [],\n};\n\nexport const githubSlice = createSlice({\n  name: 'github',\n  initialState,\n  reducers: {\n    starRepo: (state, action: PayloadAction<number>) => {\n      state.starred.push(action.payload);\n    },\n\n    unStarRepo: (state, action: PayloadAction<number>) => {\n      state.starred = state.starred.filter((id) => id !== action.payload);\n    },\n  },\n});\n\nexport const { starRepo, unStarRepo } = githubSlice.actions;\n\nexport const selectStarredReposIds = (state: RootState) => state.github.starred;\n\nexport default githubSlice.reducer;\n","export const buildGitHubApiQueryParam = <T>(params: T) => {\n  const paramKeys = Object.keys(params) as Array<keyof T>;\n\n  return paramKeys.reduce((queryString, currentParamKey) => {\n    const currentParamValue = params[currentParamKey];\n\n    if (!currentParamValue) return queryString;\n\n    return queryString.concat(`${currentParamKey}:\"${currentParamValue}\"`);\n  }, '');\n};\n","export const languagesPerPage = 25;\n\nexport const languages = [\n  'JavaScript',\n  'Python',\n  'Java',\n  'PHP',\n  'C++',\n  'C',\n  'C#',\n  'Ruby',\n  'Scala',\n  'Haskell',\n  'Shell',\n  'Elm',\n  'Rust',\n  'Kotlin',\n];\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nimport { GetReposResponse, Repository, RepoApiQuery } from './githubTypes';\nimport { buildGitHubApiQueryParam } from './util';\nimport { languagesPerPage } from './constants';\n\nexport const githubApi = createApi({\n  reducerPath: 'githubApi',\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://api.github.com/' }),\n  endpoints: (builder) => ({\n    getRepos: builder.query<Repository[], RepoApiQuery>({\n      query: (params) => ({\n        url: `search/repositories`,\n        params: {\n          q: buildGitHubApiQueryParam<RepoApiQuery>(params),\n          sort: `stars`,\n          order: `desc`,\n          page: 1,\n          per_page: languagesPerPage,\n        },\n      }),\n      transformResponse: (response: GetReposResponse) => response.items,\n    }),\n  }),\n});\n\nexport const { useGetReposQuery } = githubApi;\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport type { PreloadedState } from '@reduxjs/toolkit';\n\nimport { localStorageMiddleware } from './middleware/localStorageMiddleware';\nimport githubReducer from '../features/github/githubSlice';\nimport { githubApi } from '../features/github/githubApi';\n\nconst rootReducer = combineReducers({\n  github: githubReducer,\n  [githubApi.reducerPath]: githubApi.reducer,\n});\n\nexport const setupStore = (preloadedState?: PreloadedState<RootState>) => {\n  return configureStore({\n    reducer: rootReducer,\n    preloadedState,\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware()\n        .concat(localStorageMiddleware)\n        .concat(githubApi.middleware),\n  });\n};\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppStore = ReturnType<typeof setupStore>;\nexport type AppDispatch = AppStore['dispatch'];\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export const getFormattedDateString = (date: Date) => {\n  const year = date.getFullYear();\n  const month = ('0' + (date.getMonth() + 1)).slice(-2);\n  const day = ('0' + date.getDate()).slice(-2);\n\n  return `${year}-${month}-${day}`;\n};\n\nexport const getNDaysAgoDateString = (anchorDate: Date, daysAgo: number) => {\n  const date = new Date(\n    anchorDate.getFullYear(),\n    anchorDate.getMonth(),\n    anchorDate.getDate() - daysAgo\n  );\n  return getFormattedDateString(date);\n};\n\nexport const getLastWeekQueryString = (anchorDate: Date) => {\n  const daysToLastSunday = anchorDate.getDay();\n  const daysToLastMonday = daysToLastSunday + 6;\n\n  const lastSunday = getNDaysAgoDateString(anchorDate, daysToLastSunday);\n  const lastMonday = getNDaysAgoDateString(anchorDate, daysToLastMonday);\n\n  return `${lastMonday}..${lastSunday}`;\n};\n","import { ChangeEvent, EventHandler } from 'react';\n\nimport { languages } from '../constants';\n\nimport styles from './LanguageFilter.module.css';\n\ninterface Props {\n  onChange: EventHandler<ChangeEvent>;\n}\n\nexport function LanguageFilter({ onChange }: Props) {\n  return (\n    <label htmlFor=\"language-filter\" className={styles.label}>\n      Language:\n      <select\n        id=\"language-filter\"\n        className={styles.select}\n        onChange={onChange}\n        data-testid=\"language-filter\"\n      >\n        <option>Any</option>\n        {languages.map((language) => (\n          <option value={language} key={language}>\n            {language}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n}\n","import { ChangeEvent, EventHandler } from 'react';\n\nimport styles from './StarredFilter.module.css';\n\ninterface Props {\n  value: boolean;\n  onChange: EventHandler<ChangeEvent>;\n}\n\nexport function StarredFilter({ value, onChange }: Props) {\n  return (\n    <label className={styles.switch} data-testid=\"starred-filter\">\n      <span className={styles.labelText}>Starred:</span>\n      <input\n        type=\"checkbox\"\n        className={styles.input}\n        checked={value}\n        onChange={onChange}\n      />\n      <span className={styles.slider}></span>\n    </label>\n  );\n}\n","import { MouseEvent, EventHandler } from 'react';\nimport { Repository } from '../githubTypes';\nimport styles from './RepoListItem.module.css';\n\ninterface Props {\n  repo: Repository;\n  isStarred: boolean;\n  onStarButtonClick: EventHandler<MouseEvent>;\n  onUnStarButtonClick: EventHandler<MouseEvent>;\n}\n\nexport function RepoListItem({\n  repo,\n  isStarred,\n  onStarButtonClick,\n  onUnStarButtonClick,\n}: Props) {\n  return (\n    <article className={styles.wrapper} data-testid=\"repo-list-item\">\n      <div className={styles.titleWrapper}>\n        <h1 className={styles.title}>\n          <a href={repo.html_url} className={styles.link}>\n            {repo.owner.login} /\n            <span className={styles.repoName}> {repo.name}</span>\n          </a>\n        </h1>\n\n        {isStarred ? (\n          <button\n            className={styles.button}\n            type=\"button\"\n            onClick={onUnStarButtonClick}\n            data-testid=\"un-star-button\"\n          >\n            Un-star\n          </button>\n        ) : (\n          <button\n            className={styles.button}\n            type=\"button\"\n            onClick={onStarButtonClick}\n            data-testid=\"star-button\"\n          >\n            Star\n          </button>\n        )}\n      </div>\n\n      <p className={styles.description}>{repo.description}</p>\n\n      <div className={styles.details}>\n        <span>Language: {repo.language || 'Unknown'}</span>\n        <span>Stars: {repo.stargazers_count}</span>\n      </div>\n    </article>\n  );\n}\n","import { useState } from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { getLastWeekQueryString } from '../../app/util';\nimport { selectStarredReposIds, starRepo, unStarRepo } from './githubSlice';\nimport { useGetReposQuery } from './githubApi';\nimport { languagesPerPage } from './constants';\nimport { LanguageFilter, StarredFilter, RepoListItem } from './components/';\n\nimport styles from './Github.module.css';\n\nconst now = new Date();\nconst created = getLastWeekQueryString(now);\n\nexport const errorMessage = 'Something went wrong. Please try again later';\nexport const loadingMessage = 'Loading...';\n\nexport function Github() {\n  const [language, setLanguage] = useState<string | null>(null);\n  const [isStarredFilterActive, setIsStarredFilterActive] = useState(false);\n  const {\n    data: allRepos,\n    error,\n    isLoading,\n  } = useGetReposQuery({ created, language });\n  const starredReposIds = useAppSelector(selectStarredReposIds);\n  const dispatch = useAppDispatch();\n\n  const repos = isStarredFilterActive\n    ? allRepos?.filter((repo) => starredReposIds?.includes(repo.id))\n    : allRepos;\n\n  return (\n    <main className={styles.main}>\n      <div className={styles.banner}>\n        <h1 className={styles.bannerTitle}>Superstar Repos</h1>\n        <p className={styles.bannerDescription}>\n          See the repositories that the GitHub community starred the most in the\n          previous week\n        </p>\n      </div>\n\n      <div className={styles.container}>\n        <div className={styles.wrapper}>\n          <div className={styles.actions}>\n            <LanguageFilter\n              onChange={(event) =>\n                setLanguage((event.target as HTMLSelectElement).value)\n              }\n            />\n\n            <StarredFilter\n              value={isStarredFilterActive}\n              onChange={(event) =>\n                setIsStarredFilterActive(\n                  (event.target as HTMLInputElement).checked\n                )\n              }\n            />\n          </div>\n\n          <div>\n            {error ? (\n              // Error message\n              <div className={styles.statusMessage}>{errorMessage}</div>\n            ) : isLoading ? (\n              // Loading message\n              <div className={styles.statusMessage}>{loadingMessage}</div>\n            ) : repos?.length ? (\n              // Loaded repos\n              repos.map((repo) => (\n                <RepoListItem\n                  key={repo.id}\n                  repo={repo}\n                  isStarred={starredReposIds?.includes(repo.id)}\n                  onStarButtonClick={() => dispatch(starRepo(repo.id))}\n                  onUnStarButtonClick={() => dispatch(unStarRepo(repo.id))}\n                />\n              ))\n            ) : allRepos?.length ? (\n              // No starred repos message\n              <div\n                className={styles.statusMessage}\n                data-testid=\"no-starred-repos-message\"\n              >\n                You did not star any of the top {languagesPerPage} {language}{' '}\n                repos.\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n","import { Github } from './features/github/Github';\n\nfunction App() {\n  return <Github />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport { setupStore } from './app/store';\nimport { hydrateStore } from './app/middleware/localStorageMiddleware';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = setupStore(hydrateStore());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Github_main__1vPTO\",\"banner\":\"Github_banner__RxchO\",\"bannerTitle\":\"Github_bannerTitle__1WRUa\",\"bannerDescription\":\"Github_bannerDescription__3NbDJ\",\"container\":\"Github_container__37FXL\",\"wrapper\":\"Github_wrapper__1fNuh\",\"actions\":\"Github_actions__71O3f\",\"statusMessage\":\"Github_statusMessage__3Rdqf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"RepoListItem_wrapper__2EIvM\",\"titleWrapper\":\"RepoListItem_titleWrapper__P7ZI2\",\"title\":\"RepoListItem_title__4gSZ8\",\"link\":\"RepoListItem_link__1JA-G\",\"button\":\"RepoListItem_button__3DYBC\",\"repoName\":\"RepoListItem_repoName__gVnFY\",\"description\":\"RepoListItem_description__XJQJV\",\"details\":\"RepoListItem_details__3mYJx\"};"],"sourceRoot":""}